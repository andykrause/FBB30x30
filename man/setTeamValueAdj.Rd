% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calcRelativeValues.R
\name{setTeamValueAdj}
\alias{setTeamValueAdj}
\title{#' @export
simHitSeason <- function(iter, 
                         rosterstats_df,
                         configs){
  
  # Build Teams
  set.seed(iter)
  rand_id <- rep(1:configs$nbr_owners, 
                 sum(configs$roster$count[configs$roster$type == 'hit']))
  teams_ <- split(rosterstats_df, rand_id)
  # 
  # teams_ <- lapply(teams_, adjustObp)
  # teams_ <- lapply(teams_, adjustSlg)
  
  # Sum, flatten, adjust and return
  lapply(teams_, function(x) as.data.frame(t(colSums(x))))%>%
    dplyr::bind_rows() %>%
    dplyr::mutate(obp = obp / 18,
                  slg = slg / 18)
}}
\usage{
setTeamValueAdj(projs_, rv_df, configs)
}
\description{
## Find the replacement level value for each field
#' @export
findReplacementValue <- function(s_df,
                                 stats_v,
                                 rep_nbr){
  
  if (s_df$category == '-'){
    rep_value <- sort(stats_v)[rep_nbr]
  } else {
    rep_value <- sort(stats_v, decreasing = TRUE)[rep_nbr]
  }
  rep_value
}
}
\details{
# Calculate the relative value of each players performance in a single stat
#' @export
calRelValue <- function(data, name, rp, rv, configs){
  
  score_type <- configs$scoring$category[configs$scoring$stat == name]
  
  if (score_type == '+'){
    return((data - rp[[name]]) / rv[[name]])  
  } else {
    return((rp[[name]] - data) / rv[[name]])
  } 
}
}
