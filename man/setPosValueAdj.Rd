% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calcRelativeValues.R
\name{setPosValueAdj}
\alias{setPosValueAdj}
\title{#' @export}
\usage{
setPosValueAdj(projs_, rv_df, configs)
}
\description{
setRelValue <- function(projs_,
                        stats_,
                        configs){
  
  batrv_df <- setBattingRelValue(projs_$bat, stats_$bat, stats_$field, configs)
  pitrv_df <- setPitchingRelValue(projs_$pitch, stats_$pitch, configs)
  
  batrv_df %>%
    dplyr::bind_rows(., pitrv_df) %>%
    dplyr::arrange(desc(total))
  
}
}
\details{
#' @export
#' 
setBattingRelValue <- function(projs_df,
                               batting_df,
                               fielding_df,
                               configs){
  
  ## Set parameters
  
  bat_per_team <- sum(configs$roster$count[configs$roster$type == 'hit'])
  roster_count <- sum(configs$roster$population[configs$roster$type == 'hit'])
  
  stat_categ <- configs$scoring[configs$scoring$class == 'hit', ] %>%
    dplyr::arrange(stat)
  
  
  ## Prep Statistics
  
  stats_df <- batting_df %>%
    dplyr::filter(year == configs$season - 1)
  
  fieldstats_df <- fielding_df %>%
    dplyr::filter(year == configs$season - 1)
  
  stats_df <- stats_df %>%
    dplyr::left_join(., fieldstats_df %>%
                       dplyr::select(player_id, e),
                     by = 'player_id')
  
  # Limit stats by plate appearances
  pa_limit <- sort(stats_df$pa, decreasing = TRUE)[roster_count * 2]
  stats_df <- stats_df %>%
    dplyr::filter(pa >= pa_limit)
  
  ## Prep Projections
  
  proj_df <- batprojs_df %>%
    dplyr::filter(year == configs$season)
  
  
  ## Find the Relative Values by Stat
  
  # Limit to just roster players and the scored stats
  rstats_df <- stats_df %>%
    dplyr::mutate(ops = obp + slg + (sb/500) + (r/2000)) %>%
    dplyr::arrange(desc(ops)) %>%
    dplyr::slice(1:roster_count)
  rstats_df <- rstats_df[, as.character(stat_categ$stat)]
  
  # Simulate
  sim_hits_ <- purrr::map(.x = as.list(1:1000),
                          .f = simHitSeason,
                          rosterstats_df = rstats_df,
                          configs = configs)
  
  # Calculate relative value statistic contribution levels
  rv_df <- purrr::map(.x = sim_hits_,
                      .f = seasonAnalysis) %>%
    dplyr::bind_rows() %>%
    dplyr::group_by(category) %>%
    dplyr::summarize(median = median(diff),
                     mean = mean(diff)) %>%
    dplyr::select(category, mean) %>%
    tidyr::spread(category, mean)
  
  rv_df$hr <- ifelse(rv_df$hr < 8, 8, rv_df$hr)
  rv_df$hr <- ifelse(rv_df$hr > 16, 16, rv_df$hr)
  rv_df$slg <- ifelse(rv_df$slg < .004, .004, rv_df$slg)
  rv_df$gidp <- ifelse(rv_df$gidp < 4, 4, rv_df$gidp)
  rv_df$sb <- ifelse(rv_df$sb > 25, 25, rv_df$sb)
  rv_df$sb <- ifelse(rv_df$sb < 10, 10, rv_df$sb)
  rv_df$rbi <- ifelse(rv_df$rbi < 25, 25, rv_df$rbi)
  rv_df$rbi <- ifelse(rv_df$rbi > 60, 60, rv_df$rbi)
  
  ## Find the Replacement level
  
  rp_df <- purrr::map2(.x = stat_categ %>% plyr::dlply(., 'stat'),
                       .y = stats_df[, as.character(stat_categ$stat)],
                       .f = findReplacementValue,
                       rep_nbr = roster_count) %>% 
    as.data.frame()
  
  ## Calculate player value above replacement
  
  bystat_df <- purrr::map2(.x = proj_df[, sort(as.character(stat_categ$stat))],
                           .y = as.list(as.character(stat_categ$stat)),
                           .f = calRelValue,
                           rp = rp_df,
                           rv = rv_df,
                           configs = configs) %>%
    as.data.frame() %>%
    as.tibble() %>%
    dplyr::mutate(obp = obp / 18,
                  slg = slg / 18)
  bystat_df$total = rowSums(bystat_df)
  
  # Add to players
  var_df <- proj_df %>%
    dplyr::select(player_id, player) %>%
    dplyr::mutate(total = (bystat_df$total - 
                             median(sort(bystat_df$total, 
                                         decreasing=TRUE)[1:(roster_count*2)]))) %>%
    dplyr::arrange(desc(total))
  
  var_df
  
}
}
